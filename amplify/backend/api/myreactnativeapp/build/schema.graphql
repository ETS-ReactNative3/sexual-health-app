type BookingSystem {
  id: ID!
  user_id: String
  appointment_id: String
  clinic_id: String
  time: String
  date: String
  band: Int
  time_created: String
}

type AppointmentSystem {
  appointment_id: String!
  decription: String
  name: String
  time_created: String
}

type ClinicsSystem {
  clinics_id: String!
  address: String
  Website: String
  Description: String
  phone: Int
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelBookingSystemConnection {
  items: [BookingSystem]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelBookingSystemFilterInput {
  id: ModelIDInput
  user_id: ModelStringInput
  appointment_id: ModelStringInput
  clinic_id: ModelStringInput
  time: ModelStringInput
  date: ModelStringInput
  band: ModelIntInput
  time_created: ModelStringInput
  and: [ModelBookingSystemFilterInput]
  or: [ModelBookingSystemFilterInput]
  not: ModelBookingSystemFilterInput
}

type Query {
  getBookingSystem(id: ID!): BookingSystem
  listBookingSystems(filter: ModelBookingSystemFilterInput, limit: Int, nextToken: String): ModelBookingSystemConnection
  getAppointmentSystem(id: ID!): AppointmentSystem
  listAppointmentSystems(filter: ModelAppointmentSystemFilterInput, limit: Int, nextToken: String): ModelAppointmentSystemConnection
  getClinicsSystem(id: ID!): ClinicsSystem
  listClinicsSystems(filter: ModelClinicsSystemFilterInput, limit: Int, nextToken: String): ModelClinicsSystemConnection
}

input CreateBookingSystemInput {
  id: ID
  user_id: String
  appointment_id: String
  clinic_id: String
  time: String
  date: String
  band: Int
  time_created: String
}

input UpdateBookingSystemInput {
  id: ID!
  user_id: String
  appointment_id: String
  clinic_id: String
  time: String
  date: String
  band: Int
  time_created: String
}

input DeleteBookingSystemInput {
  id: ID
}

type Mutation {
  createBookingSystem(input: CreateBookingSystemInput!, condition: ModelBookingSystemConditionInput): BookingSystem
  updateBookingSystem(input: UpdateBookingSystemInput!, condition: ModelBookingSystemConditionInput): BookingSystem
  deleteBookingSystem(input: DeleteBookingSystemInput!, condition: ModelBookingSystemConditionInput): BookingSystem
  createAppointmentSystem(input: CreateAppointmentSystemInput!, condition: ModelAppointmentSystemConditionInput): AppointmentSystem
  updateAppointmentSystem(input: UpdateAppointmentSystemInput!, condition: ModelAppointmentSystemConditionInput): AppointmentSystem
  deleteAppointmentSystem(input: DeleteAppointmentSystemInput!, condition: ModelAppointmentSystemConditionInput): AppointmentSystem
  createClinicsSystem(input: CreateClinicsSystemInput!, condition: ModelClinicsSystemConditionInput): ClinicsSystem
  updateClinicsSystem(input: UpdateClinicsSystemInput!, condition: ModelClinicsSystemConditionInput): ClinicsSystem
  deleteClinicsSystem(input: DeleteClinicsSystemInput!, condition: ModelClinicsSystemConditionInput): ClinicsSystem
}

input ModelBookingSystemConditionInput {
  user_id: ModelStringInput
  appointment_id: ModelStringInput
  clinic_id: ModelStringInput
  time: ModelStringInput
  date: ModelStringInput
  band: ModelIntInput
  time_created: ModelStringInput
  and: [ModelBookingSystemConditionInput]
  or: [ModelBookingSystemConditionInput]
  not: ModelBookingSystemConditionInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Subscription {
  onCreateBookingSystem: BookingSystem @aws_subscribe(mutations: ["createBookingSystem"])
  onUpdateBookingSystem: BookingSystem @aws_subscribe(mutations: ["updateBookingSystem"])
  onDeleteBookingSystem: BookingSystem @aws_subscribe(mutations: ["deleteBookingSystem"])
  onCreateAppointmentSystem: AppointmentSystem @aws_subscribe(mutations: ["createAppointmentSystem"])
  onUpdateAppointmentSystem: AppointmentSystem @aws_subscribe(mutations: ["updateAppointmentSystem"])
  onDeleteAppointmentSystem: AppointmentSystem @aws_subscribe(mutations: ["deleteAppointmentSystem"])
  onCreateClinicsSystem: ClinicsSystem @aws_subscribe(mutations: ["createClinicsSystem"])
  onUpdateClinicsSystem: ClinicsSystem @aws_subscribe(mutations: ["updateClinicsSystem"])
  onDeleteClinicsSystem: ClinicsSystem @aws_subscribe(mutations: ["deleteClinicsSystem"])
}

type ModelAppointmentSystemConnection {
  items: [AppointmentSystem]
  nextToken: String
}

input ModelAppointmentSystemFilterInput {
  appointment_id: ModelStringInput
  decription: ModelStringInput
  name: ModelStringInput
  time_created: ModelStringInput
  and: [ModelAppointmentSystemFilterInput]
  or: [ModelAppointmentSystemFilterInput]
  not: ModelAppointmentSystemFilterInput
}

input CreateAppointmentSystemInput {
  appointment_id: String!
  decription: String
  name: String
  time_created: String
}

input UpdateAppointmentSystemInput {
  appointment_id: String
  decription: String
  name: String
  time_created: String
}

input DeleteAppointmentSystemInput {
  id: ID
}

input ModelAppointmentSystemConditionInput {
  appointment_id: ModelStringInput
  decription: ModelStringInput
  name: ModelStringInput
  time_created: ModelStringInput
  and: [ModelAppointmentSystemConditionInput]
  or: [ModelAppointmentSystemConditionInput]
  not: ModelAppointmentSystemConditionInput
}

type ModelClinicsSystemConnection {
  items: [ClinicsSystem]
  nextToken: String
}

input ModelClinicsSystemFilterInput {
  clinics_id: ModelStringInput
  address: ModelStringInput
  Website: ModelStringInput
  Description: ModelStringInput
  phone: ModelIntInput
  and: [ModelClinicsSystemFilterInput]
  or: [ModelClinicsSystemFilterInput]
  not: ModelClinicsSystemFilterInput
}

input CreateClinicsSystemInput {
  clinics_id: String!
  address: String
  Website: String
  Description: String
  phone: Int
}

input UpdateClinicsSystemInput {
  clinics_id: String
  address: String
  Website: String
  Description: String
  phone: Int
}

input DeleteClinicsSystemInput {
  id: ID
}

input ModelClinicsSystemConditionInput {
  clinics_id: ModelStringInput
  address: ModelStringInput
  Website: ModelStringInput
  Description: ModelStringInput
  phone: ModelIntInput
  and: [ModelClinicsSystemConditionInput]
  or: [ModelClinicsSystemConditionInput]
  not: ModelClinicsSystemConditionInput
}
